options:
  parameters:
    author: Marc Lichtman
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: pn11_over_difi_rx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: PN11 Over DIFI Rx
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: constellation_obj
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1.0'
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: qpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 12.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 20.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 8.0]
    rotation: 0
    state: disabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'symbol sync likes the

      signal to be close to -1 to +1'
    const: 1/127
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 228.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 224.0]
    rotation: 0
    state: enabled
- name: blocks_probe_rate_0
  id: blocks_probe_rate
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.15'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mintime: '500.0'
    name: ''
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 20.0]
    rotation: 0
    state: disabled
- name: blocks_skiphead_0
  id: blocks_skiphead
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '21'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 316.0]
    rotation: 0
    state: disabled
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1680, 252.0]
    rotation: 0
    state: disabled
- name: difi_source_cpp_0_0
  id: difi_source_cpp
  parameters:
    affinity: ''
    alias: ''
    bit_depth: '8'
    comment: ''
    context_behavior: '0'
    ip_addr: 127.0.0.1
    maxoutbuf: '0'
    minoutbuf: '0'
    port: '50003'
    protocol: '2'
    stream_num: '0'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 188.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: constellation_obj
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 292.0]
    rotation: 0
    state: disabled
- name: digital_costas_loop_cc_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    order: '4'
    use_snr: 'False'
    w: '0.06'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 152.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.045'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_MUELLER_AND_MULLER
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 172.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    def\
      \ __init__(self, samples=1000):  # only default arguments here\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Print first N samples',\n            in_sig=[np.complex64],\n\
      \            out_sig=[]\n        )\n        self.samples = samples\n       \
      \ self.i = 0\n\n    def work(self, input_items, output_items):\n        if self.i\
      \ < self.samples:\n            N = min(self.samples - self.i, len(input_items[0]))\n\
      \            print(input_items[0][0:N])\n            self.i += N\n         \
      \   return N\n        else:\n            return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samples: '100'
  states:
    _io_cache: ('Print first N samples', 'blk', [('samples', '1000')], [('0', 'complex',
      1)], [], '', ['samples'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 156.0]
    rotation: 0
    state: disabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\ndef pn11_gen(seed,\
      \ length):\n    reg = [int(x) for x in f\"{seed:011b}\"]\n    output = []\n\
      \    for _ in range(length):\n        output_bit = reg[-1]\n        output.append(output_bit)\n\
      \        # Feedback using taps at positions 11 and 9 (indexes 10 and 8)\n  \
      \      feedback = reg[10] ^ reg[8]\n        # Shift left and insert feedback\
      \ at the beginning\n        reg = [feedback] + reg[:-1]\n    return np.asarray(output)\n\
      \nclass pn11_ber(gr.basic_block):\n    def __init__(self, seed=1):\n       \
      \ gr.basic_block.__init__(\n            self,\n            name='PN11 Sync',\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        self.pn_length = 2047  # Length of PN11 sequence: 2^11 - 1\n\
      \        self.seq = pn11_gen(seed=seed, length=self.pn_length*2)\n        self.synced\
      \ = False\n        self.phase_shift = 0\n        self.temp_count = 0\n     \
      \   self.wait_n_samps = 100000\n        self.ii = 0\n        self.waiting =\
      \ True\n\n        self.nbits = 0.0\n        self.nerrs = 0.0\n        self.i\
      \ = 0\n        self.n_calls = 0\n        \n        self.corr_thresh = 1000.0\n\
      \  \n        # QPSK Demod\n        self.bit_mapping = {\n            (-1-1j):\
      \ [0, 0],\n            (1-1j):  [0, 1],\n            (-1+1j): [1, 0],\n    \
      \        (1+1j):  [1, 1],\n        }\n            \n            \n        #\
      \ Craft search preamble\n        self.qpsk_mapping = np.asarray([-1-1j, 1-1j,\
      \ -1+1j, 1+1j], dtype=np.complex64)\n        self.search_preamble = np.zeros(self.pn_length//2,\
      \ dtype=np.complex64)\n        for i in range(self.pn_length//2):\n        \
      \    self.search_preamble[i] = self.qpsk_mapping[self.seq[i*2] + self.seq[i*2+1]*2]\n\
      \n\n    def general_work(self, input_items, output_items):\n        in0 = input_items[0]\n\
      \        out = output_items[0]\n        N = len(out)\n        \n        if self.waiting:\n\
      \            self.ii += N\n            if self.ii > self.wait_n_samps:\n   \
      \             self.waiting = False\n            self.consume(0, N)\n       \
      \     return 0\n        \n        if not self.synced:\n            if N <= self.pn_length:\
      \ # need more samples\n                return 0\n            max_corr = 0\n\
      \            for i in range(N - self.pn_length//2):\n                corr =\
      \ np.abs(np.dot(input_items[0][i:i+self.pn_length//2], self.search_preamble))\n\
      \                # With QPSK there's actually no need to check all 4 rotations,\
      \ rotating doesnt change the abs(corr(dot()))\n                if corr > max_corr:\n\
      \                    max_corr = corr\n                if corr > self.corr_thresh:\n\
      \                    print(\"Synced! at index\", i)\n                    #print(\"\
      self.temp_count\", self.temp_count)\n                    self.synced = True\n\
      \                    \n                    phase_diff = np.angle(input_items[0][i]\
      \ / self.search_preamble[0])\n                    closest = min([np.pi / 2,\
      \ np.pi, 3 * np.pi / 2, 2 * np.pi], key=lambda t: abs(phase_diff - t))\n   \
      \                 self.phase_shift = np.exp(1j*closest)\n                  \
      \  #print(\"Phase shift:\", self.phase_shift)\n                    #print(input_items[0][i:i+10]\
      \ * -1 * self.phase_shift)\n                    self.consume(0, i) # drop the\
      \ samples right before the spike\n                    return 0\n           \
      \ #print(\"No sync found, max corr:\", max_corr)\n            self.consume(0,\
      \ N - self.pn_length//2)\n            self.temp_count += N - self.pn_length//2\n\
      \            return 0\n            \n        else: # Demod and calc BER but\
      \ also output the IQ samples for any further downstream processing\n       \
      \     n = min(len(in0), N)\n            n = min(n, len(self.seq)//2)\n     \
      \       n = n - (n % 2) # make sure it's even\n            if n < 50:\n    \
      \            return 0 # want more to be able to tell BER is crap in just 1 call\
      \ to work\n            \n            demod_bits = []\n            for s in in0[:n//2]:\
      \ # to produce n bits\n                distances = np.abs(self.qpsk_mapping\
      \ - s)\n                nearest_index = np.argmin(distances)\n             \
      \   nearest_symbol = self.qpsk_mapping[nearest_index]\n                bits\
      \ = self.bit_mapping[nearest_symbol]\n                demod_bits.extend(bits)\n\
      \            demod_bits = np.array(demod_bits, dtype=np.uint8)\n\n         \
      \   # Calculate errors and bits processed\n            sub_seq = self.seq[self.i:self.i\
      \ + n]\n            self.i += n\n            self.i %= self.pn_length\n    \
      \        current_nerrs = np.sum(np.bitwise_xor(demod_bits, sub_seq).astype('float32'))\n\
      \            self.nerrs += current_nerrs\n            if current_nerrs / n >\
      \ 0.25:\n                print(\"High BER, resyncing!\")\n                self.synced\
      \ = False\n            self.nbits += n\n            self.n_calls += 1\n    \
      \        if self.n_calls > 100: # too many prints otherwise, will slow down\
      \ GR\n                print(f\"NBits: {int(self.nbits)} \\tNErrs: {int(self.nerrs)}\
      \ \\tBER: {self.nerrs / self.nbits:.6f}\")\n                self.n_calls = 0\n\
      \n            out[:n//2] = in0[:n//2] # * self.phase_shift\n            self.consume(0,\
      \ n//2)\n            return n//2\n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '4000'
    seed: '1'
  states:
    _io_cache: ('PN11 Sync', 'pn11_ber', [('seed', '1')], [('0', 'complex', 1)], [('0',
      'complex', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 252.0]
    rotation: 0
    state: enabled
- name: epy_block_4_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\ndef pn11_gen(seed,\
      \ length):\n    reg = [int(x) for x in f\"{seed:011b}\"]\n    output = []\n\
      \    for _ in range(length):\n        output_bit = reg[-1]\n        output.append(output_bit)\n\
      \        # Feedback using taps at positions 11 and 9 (indexes 10 and 8)\n  \
      \      feedback = reg[10] ^ reg[8]\n        # Shift left and insert feedback\
      \ at the beginning\n        reg = [feedback] + reg[:-1]\n    return np.asarray(output)\n\
      \nclass pn11_ber(gr.sync_block):\n    def __init__(self, seed=1):\n        gr.sync_block.__init__(\n\
      \            self,\n            name='PN11 BER',\n            in_sig=[np.uint8],\n\
      \            out_sig=[]\n        )\n        self.nbits = 0.0\n        self.nerrs\
      \ = 0.0\n        self.i = 0\n        self.n_calls = 0\n        self.pn_length\
      \ = 2047  # Length of PN11 sequence: 2^11 - 1\n        self.seq = pn11_gen(seed=seed,\
      \ length=self.pn_length*2)\n        self.synced = False\n        self.search_size\
      \ = 2047\n        self.corr_thresh = 100.0\n        \n        # Craft search\
      \ preamble\n        qpsk_mapping = np.asarray([-1-1j, 1-1j, -1+1j, 1+1j], dtype=np.complex64)\n\
      \        self.search_preamble = np.zeros(self.search_size, dtype=np.complex64)\n\
      \        for i in range(self.search_size):\n            self.search_preamble[i]\
      \ = qpsk_mapping[self.seq[i*2]*2 + self.seq[i*2+1]]\n\n\n    def work(self,\
      \ input_items, output_items):\n        N = min(len(input_items[0]), self.pn_length)\n\
      \        sub_seq = self.seq[self.i:self.i + N]\n        self.i += N\n      \
      \  self.i %= self.pn_length\n\n        # Calculate errors and bits processed\n\
      \        self.nerrs += np.sum(np.bitwise_xor(input_items[0][0:N], sub_seq).astype('float32'))\n\
      \        self.nbits += N\n        self.n_calls += 1\n        if self.n_calls\
      \ > 100: # too many prints otherwise, will slow down GR\n            print(f\"\
      NBits: {int(self.nbits)} \\tNErrs: {int(self.nerrs)} \\tBER: {self.nerrs / self.nbits:.6f}\"\
      )\n            self.n_calls = 0\n\n        return N\n        \n        \n  \
      \      \n        \n        \n        \n        \n        \n        \n      \
      \  \n        \n        \n        \n        \n        \n        \n        \n\
      \        \n        \n        \n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    seed: '1'
  states:
    _io_cache: ('PN11 BER', 'pn11_ber', [('seed', '1')], [('0', 'byte', 1)], [], '',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1840, 252.0]
    rotation: 0
    state: disabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'True'
    gui_hint: 2,0,1,1
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 140.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.2'
    axislabels: 'True'
    bw: 40e6
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: 2.4e9
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: 0,0,1,2
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'True'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '-25'
    ymin: '-60'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 344.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'True'
    gui_hint: 1,0,1,2
    label1: I
    label10: Signal 10
    label2: Q
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '0'
    marker10: '-1'
    marker2: '0'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '100'
    srate: '1'
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.20'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 460.0]
    rotation: 0
    state: enabled

connections:
- [blocks_multiply_const_vxx_0_0, '0', blocks_probe_rate_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', digital_symbol_sync_xx_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_probe_rate_0, rate, blocks_message_debug_0, print]
- [blocks_skiphead_0, '0', digital_constellation_decoder_cb_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', epy_block_4_0, '0']
- [difi_source_cpp_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [difi_source_cpp_0_0, '0', epy_block_2, '0']
- [digital_constellation_decoder_cb_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [digital_costas_loop_cc_0, '0', blocks_skiphead_0, '0']
- [digital_costas_loop_cc_0, '0', epy_block_4, '0']
- [digital_costas_loop_cc_0, '0', qtgui_const_sink_x_0, '0']
- [digital_symbol_sync_xx_0, '0', digital_costas_loop_cc_0, '0']
- [epy_block_4, '0', blocks_null_sink_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.9.2
